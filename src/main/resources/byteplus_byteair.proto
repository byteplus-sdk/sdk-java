syntax = "proto3";
package bytedance.byteplus.byteair;
option java_package = "byteplus.sdk.byteair.protocol";
option go_package = "github.com/byteplus-sdk/sdk-go/byteair/protocol";

import "byteplus_common.proto";
import "google/protobuf/any.proto";

message DataError {
  // Output only.
  // The detailed error message.
  string message = 1;

  // Output only.
  // The failed data,that is serialized by json.
  string data = 2;
}

message WriteResponse {
  // Output only.
  // When `status.code` is 0, all payload are successfully written.
  // If `status.code` is 1001, `errors` is populated.
  // Other non-zero values indicate all payload failed.
  common.Status status = 1;

  // Output only.
  // This field is populated when `status.code` is 1001.
  // When populated, this field contains the errors.
  repeated DataError errors = 2;
}

message ImportResponse {
  // Output only.
  // The status of the import call.
  // When `status.code` is 0, all payload are successfully imported.
  // If `status.code` is 1001, `error_samples` is populated.
  // Other non-zero values indicate all payload failed.
  common.Status status = 1;

  // Output only.
  // This field is populated when `status.code` is 1001.
  // When populated, this field contains the error samples.
  repeated DataError error_samples = 2;
}

message PredictRequest {
  // Required
  // The user's info
  PredictUser user = 1;

  // Required
  // The context info
  PredictContext context = 2;

  // Required
  // The max size of results
  int32 size = 3;

  // Optional
  // If you want predict in specified items,
  // you can provide them in this field
  repeated PredictCandidateItem candidateItems = 4;

  // Optional
  // Extra info, which can't be provided by other field
  PredictExtra extra = 5;

  // If you want recommend results related specified item,
  // you need provide it in this field.
  PredictRelatedItem relatedItem = 6;

  // Optional
  // If this is a search request,
  // you can provide search info in this field.
  // Search request is considered as a special predict request.
  SearchInfo searchInfo = 7;

  // parent item for related scene
  PredictParentItem parentItem = 8;
}

message PredictUser {
  // Required
  // The user id
  string uid = 1;

  // Optional
  // The device used by user
  PredictDevice device = 2;

  // Optional
  // The user's age
  // It can be the an (estimate) single value, or a range.
  // e.g. "23", "18-25", "0-15", "50-100", etc
  string age = 3;

  // Optional.
  // The gender of the given user.
  // e.g. "male", "female", and "other".
  string gender = 4;

  // Optional
  // Province name
  string province = 5;

  // Optional.
  // City name.
  string city = 6;

  // Optional.
  // The more fine grained district or area.
  string district = 7;

  // Optional
  // The app market that user download app from
  string appMarket = 8;

  // Optional
  // The login mode
  // e.g. "wechat", "google", "self"
  string loginMode = 9;

  // Optional.
  // Country name.
  // Some sample values are "USA", "UK", etc.
  string country = 10;

  // Optional.
  // This is a catch-all field to pass all the additional information.
  // Please provide as much information as possible.
  map<string, string> extra = 100;
}

message PredictDevice {
  // Optional
  // Device id, such as 'imei'
  string deviceId = 1;

  // Optional
  // The platform used by the user, e.g. 'Android', 'Web'
  string platform = 2;

  // Optional.
  // The brand of the device.
  // e.g. "Samsung"
  string deviceVendor = 3;

  // Optional.
  // The device model.
  // e.g. "iPhone10", "Pixel 4".
  string deviceModel = 4;

  // Optional
  // The device resolution
  // e.g. "800*600"
  string deviceResolution = 5;

  // Optional.
  // Your application version.
  // e.g. V9.0.8.
  string clientVersion = 6;

  // Optional.
  // The operating system version.
  // e.g. "14.4.2"
  string osVersion = 7;

  // Optional.
  // The network used.
  // e.g. "2g", "3g", "4g", "5g", "wifi", "other".
  string networkType = 8;

  // Optional.
  // The network carrier.
  // e.g. "Version", "CMCC"
  string carrier = 9;
}

message PredictContext {
  // Required
  // The position of showing recommend result.
  // You need to negotiate with ByteDance how to define it
  string spm = 1;
  // whether close personal recommend
  bool closePersonalizedRecommend = 2;

  // Optional.
  // This is a catch-all field to pass all the additional information.
  // Please provide as much information as possible.
  map<string, string> extra = 100;
}

message PredictCandidateItem {
  // Required
  // The item id
  string id = 1;

  // Optional
  // The item score
  double score = 2;

  // Optional
  // The item's price
  double price = 3;

  // Optional
  // Boost coefficient when sorting
  double boost_coef = 4;

  // Optional.
  // This is a catch-all field to pass all the additional information.
  // Please provide as much information as possible.
  map<string, string> extra = 100;
}

message PredictExtra {
  // Optional.
  // mark for test
  bool innerTest = 1;
  // Optional.
  // This is a catch-all field to pass all the additional information.
  // Please provide as much information as possible.
  map<string, string> extra = 101;
}

message PredictRelatedItem {
  // Required
  // The item id
  string id = 1;

  // Optional.
  // This is a catch-all field to pass all the additional information.
  // Please provide as much information as possible.
  map<string, string> extra = 100;
}

message SearchInfo {
  // Required
  // The starting position of fetching,
  // which plus `size` must less or equal 5000, and begin from '0'.
  // New `start` is equal to the value of previous `start` plus `size`
  int32 start = 1;

  // Required
  // The type of search
  // 0: query
  // 1: filter
  // 2: search in specified items provided by request
  int32 searchType = 2;

  // Optional
  // 0: ascending order;
  // 1: descending order (default)
  int32 sortMode = 3;

  // Optional
  // The item's attribute used by sorting
  //  0: default
  //  1: count of sold
  //  2: price
  //  3: time
  //  4: commission
  int32 sortType = 4;

  // Optional
  // The content type of result.
  // Example, return item's id when `content` is "gid"
  string content = 5;

  // Optional
  // The key word of searching by, it's required when `searchType` is "0"
  string query = 6;

  // Optional
  // The condition of filtering by,
  // e.g. "brand", "category".
  map<string, StringArray > filters = 7;

  // Optional
  // Search results will be ignored, if they are hit those conditions
  map<string, StringArray > filterOut = 8;

  // Optional
  // The list of searching in, it's required when `searchType` is "0"
  repeated SearchGoods goodsList = 9;
}

// Protobuf does not support array type as map's value,
// so we wrap array as a object, which can be value of map
message StringArray {
  repeated string values = 1;
}

message SearchGoods {
  // Optional
  // The item id of int type
  int64 goodsId = 1[deprecated = true];

  // Required
  // The item id of string type
  string goodsIdStr = 2;

  // Optional
  // The item's price
  float  price = 3;

  // Optional
  // Boost coefficient when sorting
  float boostCeof = 4;
}

// same as PredictRelatedItem.
message PredictParentItem {
  // Required
  // The item id
  string id = 1;

  // Optional.
  // This is a catch-all field to pass all the additional information.
  // Please provide as much information as possible.
  map<string, string> extra = 100;
}

message PredictResponse {
  // Output only.
  // The error code. Callers should expect this field for all responses.
  // 0    : The request is successfully returned. Other values indicates errors.
  int32 code = 1;

  // Output only.
  // Detailed error message.
  string message = 2;

  // Output only.
  // The predict result.
  // It's only populated when `code` is "0".
  PredictResult value = 3;

  // Output only.
  // This is same as the request id of request.
  string request_id = 4;
}

message PredictResult{
  // Output only.
  // The list of predicted products.
  repeated PredictItem items = 1;

  // Output only.
  // All the predict extra info here.
  map<string, string> extra = 2;

  // Output only.
  // It is populated when search request.
  // The total count of search result,
  // not the count of this request's result.
  int32 totalCount = 3;
}

message PredictItem {
  // Output Only
  // The item id
  string id = 1;

  // Output Only
  // This is the 1-based ranking of the product.
  int32 rank = 3;

  // Output only.
  // The strategy used for this particular recommendation result.
  string transData = 4;

  // Output only.
  // All the item extra info here.
  map<string, string> extra = 5;
}

message CallbackRequest {
  // Required
  // The user's id
  string uid = 1;

  // Required.
  // The scene info.
  // Please make sure this is the same as the predict request's scene param
  string scene = 2;

  // Required
  // The list of need callback
  repeated CallbackItem items = 3;

  // Required.
  // This should be same as `PredictResponse.request_id`.
  string predict_request_id = 4;

  // callback context info
  CallbackContext context = 5;

  // optional.
  // All the callback extra info here.
  map<string, string> extra = 100;
}

message CallbackItem {
  // Required
  // The item id, that is showed to user or filtered
  string id = 1;

  // Optional
  // The item's position when showed to user.
  // If item is filtered, not showed, ignore this field
  string pos = 2;

  // Optional.
  // The extra info about this item.
  // For example, you can set the final state of the item.
  // The acceptable values are "kept", "filtered", "inserted".
  // kept     : The item was kept as is.
  // filtered : The item is filtered by the caller's own logic.
  // inserted : The item is inserted by the caller's own logic.
  string extra = 3;
}

message CallbackContext {
  // spm
  string spm = 1;

  // reqType.
  CallbackReqType req_type = 2;

  // more info
  map<string, string> extra = 100;
}

enum CallbackReqType {
  byte_scene = 0;
  not_byte_scene = 1;
  behavior = 2;
}

message CallbackResponse {
  // Output only.
  // The error code. Callers should expect this field for all
  // responses.
  // Here is the table for the possible codes.
  // 0   : The request is successfully returned. Other values indicates errors.
  int32 code = 1;

  // Output only.
  // Detailed error message.
  string message = 2;
}

// The Byteplus General service.
service ByteplusGeneralService {
  // Write
  //
  // Writes at most 100 data at a time. Exceeding 100 in a request results in
  // a rejection. One can use this to upload new data, or update existing
  // data (by providing all the fields, some data type not support update, e.g. user event).
  rpc WriteData(google.protobuf.Any) returns (WriteResponse);

  // Import
  //
  // Bulk import of data.
  //
  // `Operation.response` is of type ImportResponse. Note that it is
  // possible for a subset of the items to be successfully inserted.
  // Operation.metadata is of type Metadata.
  // This call returns immediately after the server finishes the
  // preliminary validations and persists the request. The caller should
  // keep polling `OperationResponse.operation.name` using `GetOperation`
  // call below to check the status.
  // Note: This can also be used to update the existing data(some data type not support).
  // In this case, please make sure you provide all fields.
  rpc ImportData(google.protobuf.Any) returns (common.OperationResponse);

  // Predict
  //
  // Gets the list of products (ranked).
  // The updated user data will take effect in 24 hours.
  // The updated product data will take effect in 30 mins.
  // Depending how (realtime or batch) the UserEvents are sent back, it will
  // be fed into the models and take effect after that.
  rpc Predict(PredictRequest) returns (PredictResponse);

  // Callback
  //
  // Sends back the actual product list shown to the users based on the
  // customized changes from `PredictResponse`.
  // example: our Predict call returns the list of items [1, 2, 3, 4].
  // Your custom logic have decided that product 3 has been sold out and
  // product 10 needs to be inserted before 2 based on some promotion rules,
  // the AckServerImpressionsRequest content items should looks like
  // [
  //   {id:1, extra: "{\"reason\": \"kept\"}", pos:1},
  //   {id:10, extra: "{\"reason\": \"inserted\"}", pos:2},
  //   {id:2, extra: "{\"reason\": \"kept\"}", pos:3},
  //   {id:4, extra: "{\"reason\": \"kept\"}", pos:4},
  //   {id:3, extra: "{\"reason\": \"filtered\"}", pos:0},
  // ].
  rpc Callback(CallbackRequest) returns (CallbackResponse);
}